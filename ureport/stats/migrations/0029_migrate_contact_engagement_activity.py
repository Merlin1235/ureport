# Generated by Django 3.2.8 on 2021-12-03 12:40

import time

from django.db import migrations


def noop(apps, schema_editor):  # pragma: no cover
    pass


def populate_contact_engagement_activities(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")
    Boundary = apps.get_model("locations", "Boundary")
    GenderSegment = apps.get_model("stats", "GenderSegment")
    AgeSegment = apps.get_model("stats", "AgeSegment")
    SchemeSegment = apps.get_model("stats", "SchemeSegment")
    ContactActivity = apps.get_model("stats", "ContactActivity")
    ContactEngagementActivity = apps.get_model("stats", "ContactEngagementActivity")

    initial_start_time = time.time()
    orgs = Org.objects.all().order_by("id")

    gender_dict = {elt.gender.lower(): elt.id for elt in GenderSegment.objects.all()}
    age_dict = {elt.min_age: elt.id for elt in AgeSegment.objects.all()}
    scheme_dict = {elt.scheme.lower(): elt.id for elt in SchemeSegment.objects.all()}

    for org in orgs:
        start_time = time.time()
        print(f"Stating migrating all contact activities on org #{org.id} ...")

        count = 0

        boundaries = Boundary.objects.filter(org_id=org.id)
        location_dict = {elt.osm_id.upper(): elt.id for elt in boundaries}

        old_contact_activities = ContactActivity.objects.filter(org=org).order_by("id")
        total = old_contact_activities.count()

        for old_contact_activity in old_contact_activities:
            contact = old_contact_activity.contact

            obj_date = old_contact_activity.date
            obj_date_year = obj_date.year
            born = old_contact_activity.born

            ward = old_contact_activity.ward
            district = old_contact_activity.district
            state = old_contact_activity.state

            used = old_contact_activity.used

            age_segment_id = age_dict.get(AgeSegment.get_age_segment_min_age(max(obj_date_year - int(born), 0)))
            gender_segment_id = gender_dict.get(old_contact_activity.gender, gender_dict.get("O"))

            scheme_segment_id = scheme_dict.get(old_contact_activity.scheme, None)

            location_id = None
            if ward:
                location_id = location_dict.get(ward)
            elif district:
                location_id = location_dict.get(district)
            elif state:
                location_id = location_dict.get(state)

            ContactEngagementActivity.objects.create(
                org_id=org.id,
                contact=contact,
                age_segment_id=age_segment_id,
                gender_segment_id=gender_segment_id,
                scheme_segment_id=scheme_segment_id,
                location_id=location_id,
                date=obj_date,
                used=used,
            )

            count += 1

            if count % 1000:
                elapsed = time.time() - start_time
                print(f"Migrated {count} of {total} contact activities on org #{org.id} in {elapsed:.1f} seconds")

        elapsed = time.time() - start_time
        print(f"Finished migrating all contact activities on org #{org.id} in {elapsed:.1f} seconds")

    elapsed = time.time() - initial_start_time
    print(f"ContactActivity to ContactEngagementActivity migration completed in {elapsed:.1f} seconds")


def apply_manual():  # pragma: no cover
    from django.apps import apps

    populate_contact_engagement_activities(apps, None)


class Migration(migrations.Migration):

    dependencies = [
        ("stats", "0028_install_cea_triggers"),
    ]

    operations = [migrations.RunPython(populate_contact_engagement_activities, noop)]
